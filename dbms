#!/bin/bash

DB_PATH="./databases"
mkdir -p "$DB_PATH"

#################### MAIN MENU ######################
function main_menu() {
	while true;
	do
		echo "========== DBMS =========="
		echo "1) Create Database."
		echo "2) List Databases."
		echo "3) Connect to Database."
		echo "4) Drop Database."
		echo "5) Exit."
	
		read -p "Choose an option: " choice

		case $choice in
			1) create_database ;;
			2) list_databases;;
			3) connect_database ;;
			4) drop_database ;;
			5) exit 0;;
			*) echo "*** Invalid Option!" ;;
		esac
	done
}

#################### MAIN MENU FUNCTIONS ######################

function create_database(){
	read -p "Enter Database name : " db_name

	if [ -d "$DB_PATH/$db_name" ];
	then
		echo "*** Database already exists."
	else 
		mkdir "$DB_PATH/$db_name"
		echo "*** Database [ $db_name ] created successfully."
	fi
}

function list_databases() {
	echo "*** Available Databases : "

	count=1

	for database in "$DB_PATH"/*
	do
		if [ -d $database ];
		then
			echo "* $count ) $(basename "$database")"
			let count=$count+1
		fi
	done	
}

function connect_database() {	
	read -p "Enter database name to connect : " db_name

	if [ -d "$DB_PATH/$db_name" ];
	then
		echo "*** You are connected to database [ $db_name ]"
		database_menu "$db_name"
	else
		echo "*** Database does not exist"
	fi

}

function drop_database(){
	read -p "Enter database name to drop : " db_name

	if [ -d "$DB_PATH/$db_name" ];
	then
		rm -r "$DB_PATH/$db_name"
		echo "*** Database [ $db_name ] has been dropped successfully."
	else
		echo "*** Database doesn't exist"
	fi
}

#################### DATABASE MENU ######################
function database_menu(){
db_name=$1

while true; 
do
	echo "========== Database :- $db_name =========="
	echo "1) Create Table"
	echo "2) List Tables"
	echo "3) Drop Table"
	echo "4) Insert into Table"
	echo "5) Select from Table"
	echo "6) Delete from Table"
	echo "7) Update Table"
	echo "8) Back to Main Menu"

	read -p "Choose an option : " choice

	case $choice in
		1) create_table "$db_name";;
		2) list_tables "$db_name";;
		3) drop_table "$db_name";;
		4) insert_into_table "$db_name";;
		5) select_from_table "$db_name";;
		6) delete_from_table "$db_name";;
		7) update_table "$db_name";;
		8) break ;;
		*) echo "Invalid option!" ;;
	esac
done
}

#################### DATABASE MENU FUNCTIONS ######################
function create_table() {
	db_name=$1

	read -p "Enter table name : " table_name

	table_path="$DB_PATH/$db_name/$table_name"

	if [ -f "$table_path" ]; then
		echo "Table already exists"
	else
		read -p "Enter column names (separated by comma) : " columns
		read -p "Enter primary key column : " primary_key

		IFS=',' read -a columns_array <<< "$columns"
		metadata=""

		pk=0 # Primary key flag also for keeping track of the column number of the pk
		while [ $pk -eq 0 ]; do
			i=0
			for column in "${columns_array[@]}"; do
				i=$((i+1))
				if [ "$column" == "$primary_key" ]; then
					pk=$i
					break
				fi
			done
			if [ $pk -eq 0 ]; then
				read -p "Primary key not found in the columns. Please enter primary key column : " primary_key
			else
				primary_key+=":$pk"
			fi
		done

		for column in "${columns_array[@]}"; do
			read -p "Enter datatype for column $column : " datatype
			while true; do
				if [ "$datatype" == "number" ] || [ "$datatype" == "string" ]; then
					break
				else
					echo "Invalid datatype. Please enter 'number' or 'string'."
					read -p "Enter datatype for column $column : " datatype
				fi
			done
			metadata+="$column:$datatype,"
		done

		metadata=${metadata%,} # Remove trailing comma
		echo "$metadata" > "$table_path.meta"
		echo "$primary_key" >> "$table_path.meta"

		touch "$table_path"

		echo "Table [ $table_name ] has been created successfully."
		
	fi
	
}


function list_tables() {
	db_name=$1

	echo "*** Available tables in $db_name : "
	ls "$DB_PATH/$db_name" | grep -v ".meta"
}

function drop_table() {
	db_name=$1

	read -p "Enter table name to drop : " table_name
	table_path="$DB_PATH/$db_name/$table_name"

	if [ -f "$table_path" ];
	then
		rm "$table_path" "$table_path.meta"
		echo "Table [ $table_name ] dropped successfully."
	else
		echo "Table does not exist"
	fi
}

function insert_into_table() {
	
	db_name=$1
	read -p "Enter table name : " table_name
	table_path="$DB_PATH/$db_name/$table_name"

	#create table if not exists
	while [ ! -f "$table_path" ]; do
		echo "Table does not exist"
		read -p "Enter table name : " table_name
		table_path="$DB_PATH/$db_name/$table_name"
	done
	
	# read metadata
	declare -A columns_types
	header=$(head -n 1 "$table_path.meta") # ==> key,value:key,value,....
	IFS=',' read -a columns <<< "$header"

	primary_key=$(tail -n 1 "$table_path.meta" | awk -F: '{print $1}') #==> pramary_key:col_num
	pk_col_num=$(tail -n 1 "$table_path.meta" | awk -F: '{print $2}')
	pk_values=$(awk -F, '{print $'$pk_col_num'}' "$table_path")
	
	values=""
	for column in "${columns[@]}" #==> column --> col:type
	do
		column_name=$(echo "$column" | awk -F: '{print $1}')
		column_type=$(echo "$column" | awk -F: '{print $2}')
		
		read -p "Enter value for $column_name : " value

		# Check if primary key and if so check if value already exists
		if [ "$column_name" == "$primary_key" ]; then
			while true
			do
				if [[ "$pk_values" == *"$value"* ]]; then  # *"$value"* to check if this substring exists in the string
					echo "Primary key value already exists"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done
		fi

		# Validate numbers
		if [[ "$column_type" == "number" ]]; then
			while true; do
				if [[ ! "$value" =~ ^[0-9]+$ ]]; then
					echo "Invalid value for $column_name"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done

		fi

		# Validate strings
		if [[ "$column_type" == "string" ]]; then
			while true; do
				if [[ ! "$value" =~ ^[a-zA-Z]+$ ]]; then
					echo "Invalid value for $column_name"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done
		fi
		values+="$value," # ==> value1,value2,value3,....
	done
	values=${values%,} # Remove trailing comma from the last value
	echo $values >> "$table_path"
	echo "Record inserted successfully"
	
}

function select_from_table() {
    db_name=$1
    
    read -p "Enter table name: " table_name
    table_path="$DB_PATH/$db_name/$table_name"

    if [ ! -f "$table_path" ]; then
        echo "Table does not exist!"
        return
    fi

    # Read column names and metadata
    IFS=',' read -a columns < "$table_path.meta"
    echo "Available columns: ${columns[*]}"

    read -p "Enter condition (e.g., column=value) or type 'all' for everything: " condition

    echo -e "\nResults:"
    echo "${columns[*]}"  # Print header

    # Read table data and process each row
    while IFS=',' read -r -a row; do
        if [[ "$condition" == "all" ]]; then
            echo "${row[*]}"
        else
            column_name=$(echo "$condition" | cut -d'=' -f1 | xargs)
            column_value=$(echo "$condition" | cut -d'=' -f2 | xargs)

            # Find column index
            index=-1
            for i in "${!columns[@]}"; do
                col_name=$(echo "${columns[i]}" | cut -d':' -f1)  # Extract column name
                if [[ "$col_name" == "$column_name" ]]; then
                    index=$i
                    break
                fi
            done

            # If column exists and value matches, print row
            if [[ $index -ne -1 && "${row[index]}" == "$column_value" ]]; then
                echo "${row[*]}"
            fi
        fi
    done < "$table_path"
}

function delete_from_table() {
    db_name=$1

    read -p "Enter table name: " table_name
    table_path="$DB_PATH/$db_name/$table_name"

    if [ ! -f "$table_path" ]; then
        echo "Table does not exist!"
        return
    fi

    # Read column names
    IFS=',' read -a columns < "$table_path.meta"
    echo "Available columns: ${columns[*]}"

    read -p "Enter condition (e.g., column=value) or type 'all' to delete everything: " condition

    if [[ "$condition" == "all" ]]; then
        > "$table_path"  # Clear file contents but keep metadata
        echo "All records deleted from '$table_name'."
        return
    fi

    # Extract column name and value from condition
    column_name=$(echo "$condition" | cut -d'=' -f1 | xargs)
    column_value=$(echo "$condition" | cut -d'=' -f2 | xargs)

    # Find the column index
    index=-1
    for i in "${!columns[@]}"; do
        col_name=$(echo "${columns[i]}" | cut -d':' -f1)  # Extract column name
        if [[ "$col_name" == "$column_name" ]]; then
            index=$i
            break
        fi
    done

    if [[ $index -eq -1 ]]; then
        echo "Column '$column_name' does not exist!"
        return
    fi

    # Filter out matching rows and write back the file
    temp_file=$(mktemp)
    while IFS=',' read -r -a row; do
        if [[ "${row[index]}" != "$column_value" ]]; then
            echo "${row[*]}" >> "$temp_file"
        fi
    done < "$table_path"

    mv "$temp_file" "$table_path"
    echo "Records matching '$condition' deleted successfully from '$table_name'."
}

function update_table() {
	db_name=$1

	read -p "Enter table name : " table_name
	table_path="$DB_PATH/$db_name/$table_name"

while [ ! -f "$table_path" ]; do
	echo "Table does not exist"
	read -p "Enter table name : " table_name
	table_path="$DB_PATH/$db_name/$table_name"
done

header=$(head -n 1 "$table_path.meta") # ==> key,value:key,value,....
IFS=',' read -a columns <<< "$header"

	primary_key=$(tail -n 1 "$table_path.meta" | awk -F: '{print $1}') #==> pramary_key:col_num
	pk_col_num=$(tail -n 1 "$table_path.meta" | awk -F: '{print $2}')
	pk_values=$(awk -F, '{print $'$pk_col_num'}' "$table_path")

	read -p "Enter primary key value : " pk_value

	# Check if primary key exists
	while [[ ! "$pk_values" == *"$pk_value"* ]]; do
		echo "Primary key value does not exist"
		read -p "Enter primary key value : " pk_value
	done

	#get the record
	old_record=$(awk -F, '{if($'$pk_col_num' == "'$pk_value'") print $0}' "$table_path")

	# read metadata

	for column in "${columns[@]}" #==> column --> col:type
	do
		column_name=$(echo "$column" | awk -F: '{print $1}')
		column_type=$(echo "$column" | awk -F: '{print $2}')
		
		read -p "Enter value for $column_name : " value


		# Check if primary key and if so check if value already exists
		if [ "$column_name" == "$primary_key" ]; then
			while true
			do
				if [[ "$pk_values" == *"$value"* ]]; then  # *"$value"* to check if this substring exists in the string
					echo "Primary key value already exists"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done
		fi

		# Validate numbers
		if [[ "$column_type" == "number" ]]; then
			while true; do
				if [[ ! "$value" =~ ^[0-9]+$ ]]; then
					echo "Invalid value for $column_name"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done

		fi

		# Validate strings
		if [[ "$column_type" == "string" ]]; then
			while true; do
				if [[ ! "$value" =~ ^[a-zA-Z]+$ ]]; then
					echo "Invalid value for $column_name"
					read -p "Enter value for $column_name : " value
				else
					break
				fi
			done
		fi
		values+="$value," # ==> value1,value2,value3,....
	done
	values=${values%,} # Remove trailing comma from the last value

	# Update the record
	sed -i 's/^'$old_record'$/'$values'/' "$table_path"

	echo "Record updated successfully"

	
}

main_menu
